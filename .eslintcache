[{"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/init.js":"1","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/CreateCoupon.js":"2","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/ViewCoupon.js":"3","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/SuccessModal.js":"4","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/precision.js":"5","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/BuyTicket.js":"6","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/config.js":"7","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/history.js":"8","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Faucet.js":"9","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/Claim.js":"10","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Header.js":"11","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Main.js":"12","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/DisplayTickets.js":"13","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/App.js":"14","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/FlashSwap.js":"15","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Loading.js":"16","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/index.js":"17","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/App.js":"18","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/init.js":"19","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/history.js":"20","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Main.js":"21","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Header.js":"22","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/View.js":"23","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/hooks/useWeb3Modal.js":"24","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/config.js":"25","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/precision.js":"26","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/time.js":"27","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Loading.js":"28","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/modals/AlertModal.js":"29","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/modals/SuccessModal.js":"30","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Mint.js":"31","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/createLazyMint.js":"32","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/lazyMint.js":"33","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/EIP712.js":"34","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/CreateToken.js":"35","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Upload.js":"36","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Profile.js":"37","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/SellNFT.js":"38","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/createOrders.js":"39","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/order.js":"40","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/bondingcurve.js":"41","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/UploadAllOne.js":"42"},{"size":676,"mtime":1611930943242,"results":"43","hashOfConfig":"44"},{"size":10999,"mtime":1612526960345,"results":"45","hashOfConfig":"44"},{"size":14433,"mtime":1612527422915,"results":"46","hashOfConfig":"44"},{"size":643,"mtime":1611930070285,"results":"47","hashOfConfig":"44"},{"size":351,"mtime":1611930957299,"results":"48","hashOfConfig":"44"},{"size":4883,"mtime":1612447113897,"results":"49","hashOfConfig":"44"},{"size":350,"mtime":1612447032885,"results":"50","hashOfConfig":"44"},{"size":93,"mtime":1611930070288,"results":"51","hashOfConfig":"44"},{"size":4451,"mtime":1612453940918,"results":"52","hashOfConfig":"44"},{"size":3874,"mtime":1612447129807,"results":"53","hashOfConfig":"44"},{"size":1432,"mtime":1612527623637,"results":"54","hashOfConfig":"44"},{"size":4260,"mtime":1612454047391,"results":"55","hashOfConfig":"44"},{"size":1031,"mtime":1612527364344,"results":"56","hashOfConfig":"44"},{"size":1161,"mtime":1612527621795,"results":"57","hashOfConfig":"44"},{"size":4084,"mtime":1612527895615,"results":"58","hashOfConfig":"44"},{"size":382,"mtime":1611930070281,"results":"59","hashOfConfig":"44"},{"size":648,"mtime":1611930400447,"results":"60","hashOfConfig":"61"},{"size":2059,"mtime":1630167411497,"results":"62","hashOfConfig":"61"},{"size":706,"mtime":1629608175682,"results":"63","hashOfConfig":"61"},{"size":93,"mtime":1611930070288,"results":"64","hashOfConfig":"61"},{"size":2984,"mtime":1630173732374,"results":"65","hashOfConfig":"61"},{"size":1550,"mtime":1630172565088,"results":"66","hashOfConfig":"61"},{"size":12664,"mtime":1630175513900,"results":"67","hashOfConfig":"61"},{"size":1544,"mtime":1629608139712,"results":"68","hashOfConfig":"61"},{"size":819,"mtime":1630155036111,"results":"69","hashOfConfig":"61"},{"size":351,"mtime":1611930957299,"results":"70","hashOfConfig":"61"},{"size":824,"mtime":1611930982181,"results":"71","hashOfConfig":"61"},{"size":382,"mtime":1611930070281,"results":"72","hashOfConfig":"61"},{"size":534,"mtime":1629608200821,"results":"73","hashOfConfig":"61"},{"size":643,"mtime":1629608200917,"results":"74","hashOfConfig":"61"},{"size":4241,"mtime":1630131516124,"results":"75","hashOfConfig":"61"},{"size":1528,"mtime":1629618682225,"results":"76","hashOfConfig":"61"},{"size":685,"mtime":1629618682227,"results":"77","hashOfConfig":"61"},{"size":934,"mtime":1629618682222,"results":"78","hashOfConfig":"61"},{"size":8551,"mtime":1629733022383,"results":"79","hashOfConfig":"61"},{"size":3218,"mtime":1630168505254,"results":"80","hashOfConfig":"61"},{"size":5030,"mtime":1630135087205,"results":"81","hashOfConfig":"61"},{"size":5977,"mtime":1630143655230,"results":"82","hashOfConfig":"61"},{"size":3834,"mtime":1629618682225,"results":"83","hashOfConfig":"61"},{"size":652,"mtime":1629618682228,"results":"84","hashOfConfig":"61"},{"size":1650,"mtime":1630163350627,"results":"85","hashOfConfig":"61"},{"size":9350,"mtime":1630173520246,"results":"86","hashOfConfig":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1ht5dzr",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"98m6k9",{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"124"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"188"},"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/init.js",[],["189","190"],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/CreateCoupon.js",[],["191","192"],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/ViewCoupon.js",["193"],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/SuccessModal.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/precision.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/BuyTicket.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/web3/config.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/history.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Faucet.js",["194"],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/Claim.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Header.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Main.js",["195"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Card, CardDeck, Image } from \"react-bootstrap\";\nimport { time } from \"../web3/time\";\nimport Loading from \"./Loading\";\n\nexport default function Main() {\n  const dai = \"0xff795577d9ac8bd7d90ee22b6c1703490b6512fd\"\n\n  const [listCoupons, setCoupons] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [noMetamsk, setNoMetamask] = useState(false);\n\n  const createSubArray = (coupons) => {\n    let chunks = [];\n\n    while (coupons.length > 4) {\n      chunks.push(coupons.splice(0, 4));\n    }\n\n    if (coupons.length > 0) {\n      chunks.push(coupons);\n    }\n\n    setCoupons(chunks);\n    setLoading(false);\n  }\n\n  const getCoupons = async () => {\n    const allCoupons = [];\n    const couponCount = await window.couponFactory\n      .methods\n      .totalCoupons()\n      .call();\n\n    if (Number(couponCount) === 0) {\n      setLoading(false);\n    }\n\n    for (let i = couponCount - 1; i >= 0; i--) {\n      const distCoupon = await window.couponFactory\n        .methods\n        .allCoupons(i)\n        .call();\n\n      allCoupons.push(distCoupon);\n\n      if (i === 0) {\n        createSubArray(allCoupons);\n      }\n    }\n  }\n\n  const isMetamaskInstalled = () => {\n    return (typeof window.ethereum !== 'undefined');\n  }\n\n  useEffect(() => {\n    if (!isMetamaskInstalled()) {\n        setLoading(false);\n        setNoMetamask(true);\n    } else if (listCoupons.length === 0) {\n        getCoupons();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  function DisplayCard({ coupon, count }) {\n    return (\n      <Card key={count} className=\"display-coupon-card\" >\n        <Link\n          key={count}\n          style={{ textDecoration: \"none\", color: \"black\" }}\n          to={`/view/${coupon.couponAddress}/${coupon.couponTokenSymbol}/DAI`}\n        >\n          <Card.Header style={{ marginBottom: \"5px\" }}>\n            <Image src={coupon.baseTokenURI} width=\"50px\"></Image>\n            <span> {coupon.couponTokenName} Coupon</span>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"10px\" }}>\n              Ticket Price: {coupon.ticketPrice}\n              <span> {\"DAI\"}\n              </span>\n            </div>\n            <div style={{ marginBottom: \"10px\" }}>\n              Dist Interval: Every {coupon.distInterval} minutes\n            </div>\n            <div style={{ marginBottom: \"5px\" }}>\n              {time.currentUnixTime() < (\n                Number(coupon.couponStartTimestamp) +\n                Number(coupon.ticketBuyDuration) * 60\n              ) ?\n                <div>\n                  <span>Close In: </span>\n                  <span className=\"info-message\">\n                    {time.getRemaingTime(\n                      Number(coupon.couponStartTimestamp) +\n                      Number(coupon.ticketBuyDuration) * 60\n                    )}\n                  </span>\n                </div>\n                :\n                <span className=\"warning-message\">\n                  Sold out\n                </span>\n              }\n            </div>\n          </Card.Body>\n        </Link>\n      </Card>\n    );\n  }\n\n  if (loading) {\n    return <Loading />\n  };\n\n  return (\n    <div>\n      {!noMetamsk ?\n        (listCoupons.map((element, key) => (\n          element.length === 4 ?\n            <CardDeck key={key} style={{ margin: \"2%\" }}>\n              {element.map((coupon, k) => (\n                <DisplayCard key={k} coupon={coupon} count={k} />\n              ))}\n            </CardDeck>\n            :\n            <CardDeck key={key} style={{ margin: \"2%\" }}>\n              {element.map((coupon, k) => (\n                <DisplayCard key={k} coupon={coupon} count={k} />\n              ))}\n\n              {[...Array(4 - element.length)].map((x, i) =>\n                <Card\n                  key={element.length + i + 1}\n                  className=\"hidden-card\"\n                ></Card>\n              )}\n            </CardDeck>\n          )))\n        : <div\n            className=\"alert-message\"\n            style={{ marginTop: \"20%\", fontSize: \"x-large\" }}\n          >\n            You don't have metamask. Please install first !!\n        </div>\n      }\n    </div >\n  );\n\n}\n\n","/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/view_coupon/DisplayTickets.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/App.js",[],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/FlashSwap.js",["196"],"/Users/willpark/Desktop/hackathon/marketmake-2021/avg-market/src/components/Loading.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/index.js",[],["197","198"],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/App.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/init.js",["199"],"import Web3 from 'web3';\nimport { config } from './config';\n\nexport async function initContract() {\n  window.web3 = new Web3(window.ethereum);\n  await window.ethereum.enable();\n\n  window.userAddress = (\n    await window.web3.eth.getAccounts()\n  )[0];\n\n  // window.couponFactory = new window.web3.eth.Contract(\n  //   config.couponFactoryAbi,\n  //   config.couponFactoryAddress,\n  //   { from: window.userAddress }\n  // );\n\n  // window.tokenFaucet = new window.web3.eth.Contract(\n  //   config.tokenFaucetAbi,\n  //   config.tokenFaucetAddress,\n  //   { from: window.userAddress }\n  // );\n\n  window.ethInitialized = true;\n\n  window.ethereum.on('accountsChanged', () => {\n    window.location.reload();\n  });\n}","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/history.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Main.js",["200"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, CardDeck, Image } from \"react-bootstrap\";\nimport Loading from \"./Loading\";\n\nexport default function Main() {\n  const [listTracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [noMetamsk, setNoMetamask] = useState(false);\n  const testMangerAccount = \"0xad43284879Bb1055B8bc4793850616e9239A2535\";\n\n  const selectHost = async () => {\n    const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\n    const res = await fetch('https://api.audius.co')\n    const hosts = await res.json()\n    return sample(hosts.data)\n  }\n\n  const fetchTracks = async () => {\n    const host = await selectHost()\n    const res = await fetch(`${host}/v1/tracks/trending?limit=1&timeRange=week?app_name=EXAMPLEAPP`)\n    const json = await res.json()\n    const allTracks = json.data.slice(0, 20);\n\n    console.log('aa', allTracks)\n    setTracks(allTracks);\n    setLoading(false);\n  }\n\n  const isMetamaskInstalled = () => {\n    return (typeof window.ethereum !== 'undefined');\n  }\n\n  useEffect(() => {\n    if (!isMetamaskInstalled()) {\n        setLoading(false);\n        setNoMetamask(true);\n    } else if (listTracks.length === 0) {\n      fetchTracks();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  function DisplayCard({ item, count }) {\n    return (\n      <Card key={count} className=\"display-coupon-card\" >\n        <Link\n          key={count}\n          style={{ textDecoration: \"none\", color: \"black\" }}\n          to={`/view/${testMangerAccount}`}\n        > \n          <Card.Header style={{ marginBottom: \"5px\" }}>\n            <Image src={item.artwork[\"150x150\"]} width=\"150px\"></Image>\n            <h5>{item.title}</h5>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"10px\" }}>\n              <div><b>{item.genre}</b> {item.tags && item.tags.slice(0, 10)}</div>\n            </div>\n            <div style={{ marginBottom: \"10px\" }}>\n              {item.description && item.description.slice(0, 70)}\n            </div>\n            <div style={{ marginBottom: \"5px\" }}>\n              <div>\n                <h5 style={{ color: \"blue\" }}>{item.user.name}</h5>\n                <span className=\"info-message\">\n\n                </span>\n              </div>\n            </div>\n          </Card.Body>\n        </Link>\n      </Card>\n    );\n  }\n\n  if (loading) {\n    return <Loading />\n  };\n\n  return (\n    <div>\n      <Row xs={2} md={4} className=\"g-4\">\n      {!noMetamsk ?\n        (listTracks.map((element, key) => (\n            <Col key={key}>\n              <DisplayCard item={element} count={key} />\n            </Col>\n          )))\n        : <div\n            className=\"alert-message\"\n            style={{ marginTop: \"20%\", fontSize: \"x-large\" }}\n          >\n            You don't have metamask. Please install first !!\n        </div>\n      }\n      </Row>\n    </div >\n  );\n\n}\n\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Header.js",["201","202"],"import React, { useState } from \"react\";\nimport {\n  Nav,\n  Navbar,\n  Button\n} from \"react-bootstrap\";\n\nimport AlertModal from \"./modals/AlertModal\";\nimport { initContract } from \"../web3/init\";\n\nexport default function Header() {\n  const [errorModal, setErrorModal] = useState(false);\n\n  const handleConnectMetamask = () => {\n    if (isMetamaskInstalled()) {\n      initContract();\n    } else {\n      setErrorModal(true);\n    }\n  };\n\n  const isMetamaskInstalled = () => {\n    return (typeof window.ethereum !== 'undefined');\n  }\n\n  return (\n    <div>\n      <Navbar collapseOnSelect bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"#\">\n          LiquidityNFT\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#all-in-one\">NFT Mint</Nav.Link>\n          {/* <Nav.Link href=\"#upload\">Upload</Nav.Link>\n          <Nav.Link href=\"#mint\">Mint</Nav.Link>\n          <Nav.Link href=\"#create-token\">CreateToken</Nav.Link> */}\n          <Nav.Link href=\"#profile\">Profile</Nav.Link>\n        </Nav>\n        <Nav>\n          {/* {window.userAddress ?\n            <div>Address : {window.userAddress}</div> :\n            <Button\n              onClick={handleConnectMetamask}\n              >Connect Metamask\n            </Button>\n          } */}\n        </Nav>\n      </Navbar>\n\n      <AlertModal\n        open={errorModal}\n        toggle={() => setErrorModal(false)}\n      >\n        You should connect with Metamask.            \n      </AlertModal>\n    </div>\n  )\n}\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/View.js",["203","204","205"],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/hooks/useWeb3Modal.js",["206","207"],"import { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"\";\n\nconst NETWORK_NAME = \"goerli\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const {\n    autoLoad = true,\n    infuraId = INFURA_ID,\n    NETWORK = NETWORK_NAME,\n  } = config;\n\n  const web3Modal = new Web3Modal({\n    network: NETWORK,\n    cacheProvider: true,\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          infuraId,\n        },\n      },\n    },\n  });\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function() {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal]\n  );\n\n  // If user has loaded a wallet before, load it automatically.\n  useEffect(() => {\n    if (autoLoad && web3Modal.cachedProvider && typeof provider === \"undefined\") {\n      loadWeb3Modal();\n    }\n  }, [provider, autoLoad, loadWeb3Modal, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/config.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/precision.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/time.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Loading.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/modals/AlertModal.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/modals/SuccessModal.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Mint.js",["208"],"import React, { useState } from \"react\";\nimport AlertModal from \"./modals/AlertModal\";\nimport SuccessModal from \"./modals/SuccessModal\";\nimport { Row, Col, Button, Card, Form } from \"react-bootstrap\";\nimport { createLazyMint, generateTokenId, putLazyMint } from \"../rarible/createLazyMint\";\nimport { addresses } from \"../web3/config\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\n\n//Lazy mint\nexport default function Mint({}) {\n  const [provider] = useWeb3Modal();\n  const [processing, setProcessing] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [contractAddress, setContractAddress] = React.useState();\n  const [tokenId, setTokenId] = React.useState();\n  const [mintState, setMintState] = useState({\n    ipfsHash: ''\n  });\n\n  const handleMint = async () => {\n    setProcessing(true);\n    try {\n      const signer = provider.getSigner();\n      const addr = await signer.getAddress();\n\n      const newTokenId = await generateTokenId(addresses.ERC721_RARIBLE, addr)\n      \n      setTokenId(newTokenId)\n      setContractAddress(addresses.ERC721_RARIBLE)\n\n      const form = await createLazyMint(newTokenId, provider, addresses.ERC721_RARIBLE, addr, mintState.ipfsHash)\n      await putLazyMint(form)\n      \n      setProcessing(false);\n      setSuccessModal({\n        open: true,\n        msg: \"New NFT successfully minted !!\",\n      });\n    } catch (error) {\n      setErrorModal({\n        open: true,\n        msg: error.message,\n      });\n      setProcessing(false);\n    }\n  }\n\n  return (\n    <div>\n      <Card\n        className=\"mx-auto form-card text-center\"\n        style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n      >\n        <Card.Header>\n          <u>Mint NFT Token</u>\n        </Card.Header>\n\n        <Card.Body>\n          <div>\n            <Row style={{ marginTop: \"10px\" }}>\n              <Col className=\"text-header\">\n                IPFS Hash:\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"text\"\n                  placeholder=\"IPFS Hash\"\n                  onChange={(e) => setMintState({\n                    ...mintState,\n                    ipfsHash: e.target.value\n                    //Qmc9hvaC9EUK7efbCfJc2QESB9NxW84jbPiTvz1p6Lh91d\n                    //https://ropsten.rarible.com/token/0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05:88636988724758511652761905972311461386111098846339222310546461884618702323714?tab=history\n                    //Token ID: 88636988724758511652761905972311461386111098846339222310546461884618702323714\n                    //Contract: 0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={mintState.ipfsHash}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n              <Col>\n                <Button variant=\"success\" onClick={handleMint}>\n                  {processing ?\n                    <div className=\"d-flex align-items-center\">\n                      Processing\n                        <span className=\"loading ml-2\"></span>\n                    </div>\n                    :\n                    <div>Mint</div>\n                  }\n                </Button>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                  <div>Token ID: {tokenId}</div>\n                  <div>Contract: {contractAddress}</div>\n              </Col>\n            </Row>\n          </div>\n        </Card.Body>\n      </Card>\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() => setErrorModal({\n          ...errorModal, open: false\n        })}\n        onConfirm={() => {}}\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() => setSuccessModal({\n          ...successModal, open: false\n        })}\n        onConfirm={() => {}}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div >\n  );\n}\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/createLazyMint.js",["209"],"import { utils } from \"ethers\";\nimport { sign } from \"./lazyMint\";\n\nexport async function generateTokenId(contract, minter) {\n\tconsole.log(\"generating tokenId for\", contract, minter)\n  const raribleTokenIdUrl = `https://api-dev.rarible.com/protocol/v0.1/ethereum/nft/collections/${contract}/generate_token_id?minter=${minter}`;\n  const res = await fetch(raribleTokenIdUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const resJson = await res.json();\n  console.log({resJson})\n\treturn resJson.tokenId\n}\n\nasync function createLazyMintForm(tokenId, contract, minter, ipfsHash) {\n  // const tokenId = await generateTokenId(contract, minter)\n\tconsole.log(\"generated tokenId\", tokenId)\n\treturn {\n\t\t\"@type\": \"ERC721\",\n\t\tcontract: contract,\n\t\ttokenId: tokenId,\n\t\turi: `/ipfs/${ipfsHash}`,\n\t\tcreators: [{ account: minter, value: \"10000\" }],\n\t\troyalties: []\n\t}\n}\n\nexport async function createLazyMint(tokenId, provider, contract, minter, ipfsHash) {\n  const form = await createLazyMintForm(tokenId, contract, minter, ipfsHash)\n  const signature = await sign(provider, 3, contract, form, minter)\n\treturn { ...form, signatures: [signature] }\n}\n\nexport async function putLazyMint(form) {\n  const raribleMintUrl = \"https://api-dev.rarible.com/protocol/v0.1/ethereum/nft/mints\"\n  const raribleMintResult = await fetch(raribleMintUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(form),\n  });\n  console.log({raribleMintResult})\n}","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/lazyMint.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/EIP712.js",[],"/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/CreateToken.js",["210","211","212","213","214"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport AlertModal from \"./modals/AlertModal\";\nimport SuccessModal from \"./modals/SuccessModal\";\nimport { ethers, BigNumber, utils, Contract } from \"ethers\";\nimport { abis, addresses } from \"../web3/config\";\nimport history from \"./history\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\nimport {\n  Row,\n  Col,\n  Form,\n  Card,\n  Image,\n  Button,\n  CardDeck,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreateToken() {\n  const [processing, setProcessing] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n\n  const [managerFactory, setManagerFactory] = useState(undefined);\n  const [addTokenState, setAddTokenState] = useState({\n    tokenName: \"\",\n    tokenSymbol: \"\",\n    amtTotalMint: \"\",\n    minReqAmt: \"\",\n    price: \"\",\n    payback: \"\"\n  });\n  const [provider] = useWeb3Modal();\n  const [value, setValue] = useState(\"\");\n\n  const getManagerFactory = useCallback(async () => {\n    const timerId = setTimeout(async () => {\n      if (typeof(provider) !== \"undefined\") {\n        const signer = provider.getSigner();\n        const managerFactory = new Contract(\n          addresses.MANAGER_FACTORY,\n          abis.MANAGER_FACTORY_ABI,\n          signer\n        );\n        setManagerFactory(managerFactory);\n        clearTimeout(timerId);\n      }\n    }, 500);\n  }, [provider]);\n\n  useEffect(() => {\n    if (!managerFactory) {\n      getManagerFactory();\n    }\n  }, [managerFactory, getManagerFactory]);\n\n  const getValue = useCallback(() => {\n    setTimeout(() => {\n        if (addTokenState.amtTotalMint !== \"\" && addTokenState.price !== \"\") {\n            const value = utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\");\n            console.log(utils.formatEther(value));\n            setValue(utils.formatEther(value));\n        }\n    }, 500);\n  });\n\n  useEffect(() => {\n    if (value.length <= 18) {\n      getValue();\n    }\n  }, [getValue, value]);\n\n\n  const handleCreateToken = async () => {\n    setProcessing(true);\n    console.log('f', addTokenState)\n\n    console.log('s', provider)\n    \n    try {\n        const result = await managerFactory.callStatic.newManager(\n            addTokenState.tokenName,\n            addTokenState.tokenSymbol,\n            utils.parseEther(addTokenState.amtTotalMint),\n            utils.parseEther(addTokenState.minReqAmt),\n            utils.parseEther(addTokenState.minReqAmt),\n            {\n              value: utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\"),\n              gasLimit: BigNumber.from(\"5000000\"),\n            }\n        );\n        await managerFactory.newManager(\n            addTokenState.tokenName,\n            addTokenState.tokenSymbol,\n            utils.parseEther(addTokenState.amtTotalMint),\n            utils.parseEther(addTokenState.minReqAmt),\n            utils.parseEther(addTokenState.minReqAmt),\n            {\n                value: utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\"),\n                gasLimit: BigNumber.from(\"5000000\"),\n            }\n        );\n        console.log('r', result)\n        \n        setProcessing(false);\n        setSuccessModal({\n          open: true,\n          msg: \"Token successfully created !!\",\n        });\n    } catch (e) {\n      console.error(e)\n      setProcessing(false);\n      setErrorModal({\n        open: true,\n        msg: e.message\n      })\n    }\n    \n  }\n\n  return (\n    <div style={{ marginTop: \"5%\" }}>\n      <CardDeck>\n        <Card className=\"hidden-card\"></Card>\n\n        <Card className=\"mx-auto create-card\">\n          <Card.Header>\n            <u>Create Token</u>\n          </Card.Header>\n\n          <Card.Body>\n            <Row style={{ marginTop: \"10px\" }}>\n              <Col className=\"text-header\">\n                Token Name:\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"text\"\n                  placeholder=\"Token Name\"\n                  onChange={(e) => setAddTokenState({\n                    ...addTokenState,\n                    tokenName: e.target.value\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={addTokenState.tokenName}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <Col className=\"text-header\">\n                Token Symbol:\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"text\"\n                  placeholder=\"Token Symbol\"\n                  onChange={(e) => setAddTokenState({\n                    ...addTokenState,\n                    tokenSymbol: e.target.value\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={addTokenState.tokenSymbol}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <Col className=\"text-header\">\n                Total amount for mint\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"number\"\n                  step=\"0\"\n                  placeholder=\"Total amount for mint:\"\n                  onChange={(e) => setAddTokenState({\n                    ...addTokenState,\n                    amtTotalMint: e.target.value\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={addTokenState.amtTotalMint}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <Col className=\"text-header\">\n                Initial Price\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  placeholder=\"Initial Price (ETH):\"\n                  onChange={(e) => setAddTokenState({\n                    ...addTokenState,\n                    price: e.target.value\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={addTokenState.price}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row>\n              <Col className=\"text-header\">\n                Minimum amount for request:\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"number\"\n                  step=\"0\"\n                  placeholder=\"Minimum amount for request:\"\n                  onChange={(e) => setAddTokenState({\n                    ...addTokenState,\n                    minReqAmt: e.target.value\n                  })}\n                  style={{ width: \"80%\" }}\n                  value={addTokenState.minReqAmt}\n                  required\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col className=\"text-header\">\n                Total estimation fee\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <div className=\"detail final\">{value} ETH</div>\n              </Col>\n            </Row>\n        </Card.Body>\n\n        <Card.Footer className=\"text-center\">\n          <Button\n            onClick={handleCreateToken}\n            variant=\"outline-success\"\n          >\n            {\n              processing ?\n              <div className=\"d-flex align-items-center\">\n                Processing\n                <span className=\"loading ml-2\"></span>\n              </div>\n              :\n              <div>Fractionize</div>\n            }\n          </Button>\n        </Card.Footer>\n      </Card>\n\n      <Card className=\"hidden-card\"></Card>\n    </CardDeck>\n    <AlertModal\n      open={errorModal.open}\n      toggle={() => setErrorModal({\n        ...errorModal, open: false\n      })}\n    >\n      {errorModal.msg}\n    </AlertModal>\n\n    <SuccessModal\n      open={successModal.open}\n      toggle={() => setSuccessModal({\n        ...successModal, open: false\n      })}\n      onConfirm={() => history.push(\"/\")}\n    >\n      {successModal.msg}\n    </SuccessModal>  \n    </div>\n  )\n}","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Upload.js",["215","216","217"],"import React, { useState } from \"react\";\nimport AlertModal from \"./modals/AlertModal\";\nimport SuccessModal from \"./modals/SuccessModal\";\nimport { Row, Col, Button, Card, Form } from \"react-bootstrap\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\n\n//Lazy mint\nexport default function Upload({}) {\n  const [provider] = useWeb3Modal();\n  const [processing, setProcessing] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [ipfsHash, setIpfsHash] = useState('');\n  const ipfsAPI = require(\"ipfs-http-client\");\n\n  const ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\n  const handleUpload = async () => {\n    setProcessing(true);\n\n    const nftJSON = {\n        description: \"LISTEN TO JENNY NOW! MY COLLAB WITH 3LAU EXCLUSIVELY ON AUDIUS!\\n\\nFollow:\\nyoutube.com/steveaoki\\nfacebook.com/steveaoki\\ntwitter.com/steveaoki\\ninstagram.com/steveaoki\\nSnapchat: @aokisteve\\nTikTok: @steveaoki\\nTriller: @steveaoki\",\n        external_url: \"https://usermetadata.audius.co/ipfs/QmWHyf1UqEZCVrGcCefwxX3NH3KTJ8kVn45DbvBeaPZx6X/150x150.jpg\",\n        image: \"https://usermetadata.audius.co/ipfs/QmWHyf1UqEZCVrGcCefwxX3NH3KTJ8kVn45DbvBeaPZx6X/150x150.jpg\",\n        name: \"Jenny - Steve Aoki & 3LAU\",\n        attributes: [\n          {\n            trait_type: \"genre\",\n            value: \"Electronic\",\n          },\n          {\n            trait_type: \"tags\",\n            value: \"edm,electronic,electro,bass,steveaoki,3lau,hype,dance\",\n          },\n        ],\n      };\n\n    // ipfsHash\n    const result = await ipfs.add(JSON.stringify(nftJSON));\n    if (result && result.path) {\n      setIpfsHash(result.path);\n    }\n\n    setProcessing(false);\n  }\n\n  return (\n    <div>\n      <Card\n        className=\"mx-auto form-card text-center\"\n        style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n      >\n        <Card.Header>\n          <u>Upload Music Info</u>\n        </Card.Header>\n\n        <Card.Body>\n          <div>\n\n            <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n              <Col>\n                <Button variant=\"success\" onClick={handleUpload}>\n                  {processing ?\n                    <div className=\"d-flex align-items-center\">\n                      Processing\n                        <span className=\"loading ml-2\"></span>\n                    </div>\n                    :\n                    <div>Upload</div>\n                  }\n                </Button>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                  <div>IPFS Hash: {ipfsHash}</div>\n              </Col>\n            </Row>\n          </div>\n        </Card.Body>\n      </Card>\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() => setErrorModal({\n          ...errorModal, open: false\n        })}\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() => setSuccessModal({\n          ...successModal, open: false\n        })}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div >\n  );\n}\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/Profile.js",["218","219","220","221","222"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, CardDeck, Image, Button } from \"react-bootstrap\";\nimport Loading from \"./Loading\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\nimport { abis, addresses } from \"../web3/config\";\nimport { Contract } from \"ethers\";\nimport SellNFT from \"./SellNFT\";\n\nconst { BufferList } = require(\"bl\");\nconst ipfsAPI = require(\"ipfs-http-client\");\n\nexport default function Profile() {\n  const ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\n  const [yourCollectibles, setYourCollectibles] = useState();\n  const [provider] = useWeb3Modal();  \n\n  const getFromIPFS = async hashToGet => {\n    for await (const file of ipfs.get(hashToGet)) {\n      console.log(file.path);\n      if (!file.content) continue;\n      const content = new BufferList();\n      for await (const chunk of file.content) {\n        content.append(chunk);\n      }\n      console.log(content);\n      return content;\n    }\n  };\n\n    const updateYourCollectiblesByRarible = async () => {\n      const signer = provider.getSigner();\n      const addr = await signer.getAddress();\n\n      const collectible = new Contract(addresses.COLLECTIBLE, abis.COLLECTIBLE_ABI, signer)\n      const balance = await collectible.balanceOf(addr);\n      // const readContracts = useContractLoader(provider);\n      // const balance = useContractReader(readContracts, \"YourCollectible\", \"balanceOf\", [addr]);\n\n      const yourBalance = balance && balance.toNumber && balance.toNumber();\n\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await collectible.tokenOfOwnerByIndex(addr, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await collectible.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n\n          const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\n          console.log(\"ipfsHash\", ipfsHash);\n\n          const jsonManifestBuffer = await getFromIPFS(ipfsHash);\n\n          try {\n            const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\n            console.log(\"jsonManifest\", jsonManifest);\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: addr, ...jsonManifest });\n          } catch (e) {\n            console.log(e);\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setYourCollectibles(collectibleUpdate);\n    };\n\n  useEffect(() => {\n    const updateYourCollectiblesByMock = async () => {\n      if (provider!== undefined) {\n        const signer = provider.getSigner();\n          const addr = await signer.getAddress();\n          \n          const collectibleUpdate = [];\n            for (let tokenIndex = 0; tokenIndex < 1; tokenIndex++) {\n              collectibleUpdate.push({\n                address: addr,\n                artwork: \"https://usermetadata.audius.co/ipfs/QmWHyf1UqEZCVrGcCefwxX3NH3KTJ8kVn45DbvBeaPZx6X/150x150.jpg\",\n                description: \"LISTEN TO JENNY NOW! MY COLLAB WITH 3LAU EXCLUSIVELY ON AUDIUS!\\n\\nFollow:\\nyoutube.com/steveaoki\\nfacebook.com/steveaoki\\ntwitter.com/steveaoki\\ninstagram.com/steveaoki\\nSnapchat: @aokisteve\\nTikTok: @steveaoki\\nTriller: @steveaoki\",\n                genre: \"Electronic\",\n                id: \"agVo1\",\n                tags: \"edm,electronic,electro,bass,steveaoki,3lau,hype,dance\",\n                title: \"Jenny - Steve Aoki & 3LAU\"\n              }) \n            }\n            setYourCollectibles(collectibleUpdate);\n        }\n      }      \n\n    updateYourCollectiblesByMock();\n  }, [provider]);\n\n  function DisplayCard({ item, count }) {\n    return (\n      <Card key={count} className=\"display-coupon-card\" >\n        <Link\n          key={count}\n          style={{ textDecoration: \"none\", color: \"black\" }}\n          to={`/view/`}\n        > \n          <Card.Header style={{ marginBottom: \"5px\" }}>\n            <Image src={item.artwork} width=\"150px\"></Image>\n            <h5>{item.title}</h5>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"10px\" }}>\n              <div><b>{item.genre}</b> {item.tags && item.tags.slice(0, 10)}</div>\n            </div>\n            <div style={{ marginBottom: \"10px\" }}>\n              {item.description && item.description.slice(0, 70)}\n            </div>\n            <div style={{ marginBottom: \"5px\" }}>\n              <div>\n                <h5 style={{ color: \"blue\" }}>{item.address}</h5>\n              </div>\n            </div>\n          </Card.Body>\n        </Link>\n      </Card>\n    );\n  }\n\n  return (\n    <div>\n      \n      <Row xs={2} md={4} className=\"g-4\">\n      {\n        yourCollectibles && yourCollectibles.map((element, key) => (\n          <Col key={key}>\n            <DisplayCard item={element} count={key} />\n            <SellNFT />\n          </Col>\n        ))\n      }\n      </Row>\n    </div >\n  );\n\n}\n\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/SellNFT.js",["223","224","225","226","227","228"],"import React, { useState } from \"react\";\nimport AlertModal from \"./modals/AlertModal\";\nimport SuccessModal from \"./modals/SuccessModal\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\nimport { ethers, BigNumber, utils, Contract } from \"ethers\";\nimport { Row, Col, Button, Card, Form } from \"react-bootstrap\";\nimport { abis, addresses } from \"../web3/config\";\nimport { createSellOrder } from \"../rarible/createOrders\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\n\n//Lazy mint\nexport default function SellNFT({}) {\n  const [provider] = useWeb3Modal();\n  const [processing, setProcessing] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [sellForEthValue, setSellForEthValue] = React.useState();\n  const [sellOrderContent, setSellOrderContent] = useState();\n\n  // for testing\n  const collectionId = '0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05';\n  const tokenId = '88636988724758511652761905972311461386111098846339222310546461884618702323714';\n\n  // const handleApprove = async () => {\n  //   // console.log(\"writeContracts\", writeContracts);\n  //   // const thisERC721Rarible = writeContracts.ERC721Rarible.attach(collectionContract)\n  //   // tx(thisERC721Rarible.approve(addresses.TRANFER_FROXY_RARIBLE, tokenId));\n\n  //   const timerId = setTimeout(async () => {\n  //     if (typeof(provider) !== \"undefined\") {\n  //       const signer = provider.getSigner();\n  //       const thisERC721Rarible = new Contract(\n  //         addresses.ERC721_RARIBLE,\n  //         abis.ERC721Rarible,\n  //         signer\n  //       ).attach(collectionId);\n  //       thisERC721Rarible.approve(addresses.TRANFER_FROXY_RARIBLE, tokenId)\n  //       clearTimeout(timerId);\n  //     }\n  //   }, 500);\n\n  // }\n\n  const handleSellOrder = async () => {\n    setProcessing(true);\n    try {\n      const signer = provider.getSigner();\n      const addr = await signer.getAddress();\n\n      createSellOrder(\"MAKE_ERC721_TAKE_ETH\", provider, {\n        accountAddress: addr,\n        makeERC721Address: addresses.ERC721_RARIBLE,\n        makeERC721TokenId: tokenId,\n        ethAmt: utils.parseEther(sellForEthValue.toString()).toString(),\n      })\n      \n      setProcessing(false);\n    } catch (error) {\n      setErrorModal({\n        open: true,\n        msg: error.message,\n      });\n      setProcessing(false);\n    }\n  }\n\n  return (\n    <div>\n      <Card\n        className=\"mx-auto form-card text-center\"\n        style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n      >\n        <Card.Header>\n          <u>Sell NFT</u>\n        </Card.Header>\n\n        <Card.Body>\n          <div>\n            <Row style={{ marginTop: \"10px\" }}>\n              <Col className=\"text-header\">\n                Sell for ETH:\n              </Col>\n              <Col style={{ paddingLeft: \"0px\" }}>\n                <Form.Control\n                  className=\"mb-4\"\n                  type=\"text\"\n                  placeholder=\"ETH\"\n                  onChange={(e) => setSellForEthValue(e.target.value)}\n                  style={{ width: \"80%\" }}\n                  value={sellForEthValue}\n                  required\n                />\n              </Col>\n            </Row>\n\n            <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n              <Col>\n                <Button variant=\"success\" onClick={handleSellOrder}>\n                  {processing ?\n                    <div className=\"d-flex align-items-center\">\n                      Processing\n                        <span className=\"loading ml-2\"></span>\n                    </div>\n                    :\n                    <div>Create Sell Order</div>\n                  }\n                </Button>\n              </Col>\n            </Row>\n          </div>\n        </Card.Body>\n      </Card>\n\n      <Button\n        style={{ margin: 8 }}\n        size=\"large\"\n        shape=\"round\"\n        type=\"primary\"\n        onClick={async () => {\n          let sellOrderResult\n          if (tokenId) {\n            const getSellOrdersByItemUrl = `https://api-dev.rarible.com/protocol/v0.1/ethereum/order/orders/sell/byItem?contract=${collectionId}&tokenId=${tokenId}&sort=LAST_UPDATE`;\n            sellOrderResult = await fetch(getSellOrdersByItemUrl);\n          } else {\n            const getSellOrderByCollectionUrl = `https://api-dev.rarible.com/protocol/v0.1/ethereum/order/orders/sell/byCollection?collection=${collectionId}&sort=LAST_UPDATE`;\n            sellOrderResult = await fetch(getSellOrderByCollectionUrl);\n          }\n          const resultJson = await sellOrderResult.json();\n          if (resultJson && resultJson.orders) {\n            console.log('result', resultJson.orders[0])\n            setSellOrderContent(resultJson.orders[0]);\n          }\n        }}\n      >\n        Get Sell Orders\n      </Button>\n\n      { sellOrderContent? \n        <Card\n          title={\n            <div>\n              <span style={{ fontSize: 16, marginRight: 8 }}>{sellOrderContent.type}</span>\n            </div>\n          }\n        >\n          <div>\n            <p>collectionId: {sellOrderContent.make.assetType.contract}</p>\n            <p>tokenId: {sellOrderContent.make.assetType.tokenId}</p>\n            <p>\n              price: {formatEther(sellOrderContent.take.value)}\n               {sellOrderContent.take.assetType.assetClass}\n            </p>\n            <p>createAt: {sellOrderContent.createdAt}</p>\n          </div>\n        </Card>\n        :<div></div>\n      }\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() => setErrorModal({\n          ...errorModal, open: false\n        })}\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() => setSuccessModal({\n          ...successModal, open: false\n        })}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div >\n  );\n}\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/createOrders.js",["229","230"],"import { utils } from \"ethers\";\nimport { sign, getMessageHash } from \"./order\";\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\nasync function prepareOrderMessage(form) {\n  const raribleEncodeOrderUrl = \"https://api-dev.rarible.com/protocol/v0.1/ethereum/order/encoder/order\";\n  const res = await fetch(raribleEncodeOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(form),\n  });\n  const resJson = await res.json();\n  console.log({ resJson });\n  return resJson.signMessage;\n}\n\nfunction createERC721ForEthOrder(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    make: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId,\n      },\n      value: \"1\",\n    },\n    take: {\n      assetType: {\n        assetClass: \"ETH\",\n      },\n      value: price,\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: [],\n    },\n    salt,\n  };\n}\n\nfunction createEthForERC721Order(maker, contract, tokenId, price, salt) {\n  return {\n    type: \"RARIBLE_V2\",\n    maker: maker,\n    take: {\n      assetType: {\n        assetClass: \"ERC721\",\n        contract: contract,\n        tokenId: tokenId,\n      },\n      value: \"1\",\n    },\n    make: {\n      assetType: {\n        assetClass: \"ETH\",\n      },\n      value: price,\n    },\n    data: {\n      dataType: \"RARIBLE_V2_DATA_V1\",\n      payouts: [],\n      originFees: [],\n    },\n    salt,\n  };\n}\nexport const createSellOrder = async (type, provider, params) => {\n  let order;\n  let signature;\n  const salt = random(1,1000)\n  console.log({params})\n  switch (type) {\n    case \"MAKE_ERC721_TAKE_ETH\":\n      order = createERC721ForEthOrder(\n        params.accountAddress,\n        params.makeERC721Address,\n        params.makeERC721TokenId,\n        params.ethAmt,\n        salt\n      );\n      console.log({ order });\n      const preparedOrder = await prepareOrderMessage(order);\n      console.log({preparedOrder})\n      signature = await sign(provider, preparedOrder, params.accountAddress);\n\n      break;\n\n    default:\n      break;\n  }\n\n  const raribleOrderUrl = \"https://api-dev.rarible.com/protocol/v0.1/ethereum/order/orders\";\n  const raribleOrderResult = await fetch(raribleOrderUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      ...order,\n      signature,\n    }),\n  });\n  console.log({ raribleOrderResult });\n};\n\nexport const matchSellOrder = async (sellOrder, params) => {\n  const matchingOrder = createEthForERC721Order(\n    params.accountAddress,\n    sellOrder.make.assetType.contract,\n    sellOrder.make.assetType.tokenId,\n    sellOrder.take.value,\n    params.salt || 0,\n  );\n  const preparedOrder = await prepareOrderMessage(matchingOrder);\n  console.log({ preparedOrder });\n  \n  console.log({sellOrder})\n  \n  const preparedSellOrder = await prepareOrderMessage(createERC721ForEthOrder(\n    sellOrder.maker,\n    sellOrder.make.assetType.contract,\n    sellOrder.make.assetType.tokenId,\n    sellOrder.take.value,\n    parseInt(Number(sellOrder.salt), 10)\n  ))\n  return {preparedOrder, preparedSellOrder};\n};\n\nexport async function prepareMatchingOrder(sellOrder, accountAddress) {\n  const rariblePrepareTxUrl = `https://api-dev.rarible.com/protocol/v0.1/ethereum/order/orders/${sellOrder.hash}/prepareTx`\n  const res = await fetch(rariblePrepareTxUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      maker: accountAddress,\n      amount: 1,\n      payouts: [],\n      originFees: []\n    }),\n  });\n  const resJson = await res.json();\n  console.log({ resJson });\n  return resJson;\n}\n\nexport const matchOrder = async (provider, order) => {};\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/rarible/order.js",["231"],"import {TypedDataUtils} from \"eth-sig-util\"\nimport {bufferToHex} from \"ethereumjs-util\"\nconst EIP712 = require(\"./EIP712\");\n\nfunction AssetType(assetClass, data) {\n\treturn { assetClass, data }\n}\n\nexport async function sign(provider, order, account) {\n\tconst data = EIP712.createTypeData(order.domain, order.structType, order.struct, order.types);\n  console.log({data})\n\treturn (await EIP712.signTypedData(provider, account, data)).sig;\n}\n\nexport async function getMessageHash(order) {\n\tconst data = EIP712.createTypeData(order.domain, order.structType, order.struct, order.types);\n  console.log({data})\n\treturn bufferToHex(TypedDataUtils.sign(data))\n}\n","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/web3/bondingcurve.js",["232","233","234","235","236","237"],"\nconst MAX_RESERVE_RATIO = 1000000;\n\nexport const calculatePurchaseReturn = (\n    _supply,\n    _reserveBalance,\n    _reserveRatio,\n    _depositAmount) =>\n{\n\n    if(_supply > 0 && _reserveBalance > 0 && _reserveRatio > 0 && _reserveRatio <= MAX_RESERVE_RATIO) {\n        // special case for 0 deposit amount\n        if (_depositAmount == 0) {\n            return 0;\n        }\n        // special case if the ratio = 100%\n        if (_reserveRatio == MAX_RESERVE_RATIO) {\n            return _supply*_depositAmount/_reserveBalance;\n        }\n\n        //Token Supply * ((1 + ReserveTokensReceived / ReserveTokenBalance) ^ (ReserveRatio) - 1)\n        return _supply * (Math.pow(1 + _depositAmount/_reserveBalance, _reserveRatio)-1)\n    }\n    \n    return 0;\n}\n\n\nexport const calculateSaleReturn = (\n    _supply,\n    _reserveBalance,\n    _reserveRatio,\n    _sellAmount) =>\n{\n\n    if(_supply > 0 && _reserveBalance > 0 && _reserveRatio > 0 && _reserveRatio <= MAX_RESERVE_RATIO && _sellAmount <= _supply) {\n         // special case for 0 sell amount\n         if (_sellAmount == 0) {\n            return 0;\n        }\n        // special case for selling the entire supply\n        if (_sellAmount == _supply) {\n            return _reserveBalance;\n        }\n        // special case if the ratio = 100%\n        if (_reserveRatio == MAX_RESERVE_RATIO) {\n            return _reserveBalance*_sellAmount/_supply;\n        }\n\n        //Sale Return = ReserveTokenBalance * (1 - (1 - SMILE Token Received / SMILE Token Supply) ^ (1 / (ReserveRatio)))**\n        return _reserveBalance * (1 - Math.pow(1 - _sellAmount / _supply), (1 / _reserveRatio))\n    }\n    \n    return 0;\n}","/Users/willpark/Desktop/hackathon/nftvision_2021/bond-nft-market/src/components/UploadAllOne.js",["238","239","240","241","242","243","244"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport AlertModal from \"./modals/AlertModal\";\nimport SuccessModal from \"./modals/SuccessModal\";\nimport { Row, Col, Button, Card, CardDeck, Form, Image, ProgressBar } from \"react-bootstrap\";\nimport { ethers, BigNumber, utils, Contract } from \"ethers\";\nimport useWeb3Modal from \"../hooks/useWeb3Modal\";\nimport { abis, addresses } from \"../web3/config\";\nimport { createLazyMint, generateTokenId, putLazyMint } from \"../rarible/createLazyMint\";\n\n//Lazy mint\nexport default function Upload({}) {\n  const [provider] = useWeb3Modal();\n  const [processing, setProcessing] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n\n  // progress ui\n  const [progress, setProgress] = useState(0);\n  const [step, setStep] = useState(0);\n\n  //ipfs\n  const [ipfsHash, setIpfsHash] = useState('');\n  const ipfsAPI = require(\"ipfs-http-client\");\n\n  //contract-rarible\n  const [contractAddress, setContractAddress] = React.useState();\n  const [tokenId, setTokenId] = React.useState();\n\n  //fractionize\n  const [managerFactory, setManagerFactory] = useState(undefined);\n  const [addTokenState, setAddTokenState] = useState({\n    tokenName: \"aoki\",\n    tokenSymbol: \"AOKI\",\n    amtTotalMint: \"10\",\n    minReqAmt: \"1\",\n    price: \"0.00001\",\n    payback: \"\"\n  });\n  const [value, setValue] = useState(\"\");\n  const [newManagerAddr, setNewManagerAddr] = useState(undefined)\n\n\n///init factory\nconst getManagerFactory = useCallback(async () => {\n    const timerId = setTimeout(async () => {\n      if (typeof(provider) !== \"undefined\") {\n        const signer = provider.getSigner();\n        const managerFactory = new Contract(\n          addresses.MANAGER_FACTORY,\n          abis.MANAGER_FACTORY_ABI,\n          signer\n        );\n        setManagerFactory(managerFactory);\n        clearTimeout(timerId);\n      }\n    }, 500);\n  }, [provider]);\n\n  useEffect(() => {\n    if (!managerFactory) {\n      getManagerFactory();\n    }\n  }, [managerFactory, getManagerFactory]);\n\n  const getValue = useCallback(() => {\n    setTimeout(() => {\n        if (addTokenState.amtTotalMint !== \"\" && addTokenState.price !== \"\") {\n            const value = utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\");\n            // console.log(utils.formatEther(value));\n            setValue(utils.formatEther(value));\n        }\n    }, 500);\n  });\n\n  useEffect(() => {\n    if (value.length <= 18) {\n      getValue();\n    }\n  }, [getValue, value]);\n\n  const nftJSON = {\n    description: \"LISTEN TO JENNY NOW! MY COLLAB WITH 3LAU EXCLUSIVELY ON AUDIUS!\\n\\nFollow:\\nyoutube.com/steveaoki\\nfacebook.com/steveaoki\\ntwitter.com/steveaoki\\ninstagram.com/steveaoki\\nSnapchat: @aokisteve\\nTikTok: @steveaoki\\nTriller: @steveaoki\",\n    external_url: \"https://usermetadata.audius.co/ipfs/QmWHyf1UqEZCVrGcCefwxX3NH3KTJ8kVn45DbvBeaPZx6X/150x150.jpg\",\n    image: \"https://usermetadata.audius.co/ipfs/QmWHyf1UqEZCVrGcCefwxX3NH3KTJ8kVn45DbvBeaPZx6X/150x150.jpg\",\n    name: \"Jenny - Steve Aoki & 3LAU\",\n    attributes: [\n      {\n        trait_type: \"genre\",\n        value: \"Electronic\",\n      },\n      {\n        trait_type: \"tags\",\n        value: \"edm,electronic,electro,bass,steveaoki,3lau,hype,dance\",\n      },\n    ],\n  };\n\n  //Uploading music info into IPFS\n  const step1 = async () => {\n    const ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });    \n\n    // ipfsHash\n    const result = await ipfs.add(JSON.stringify(nftJSON));\n    if (result && result.path) {\n      setIpfsHash(result.path);\n      console.log('STEP1: ipfsHash', result.path)\n\n      goStep(2);\n    }\n  }\n\n  //Minting NFT with rarible protocol\n  const step2 = async () => {\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n\n    const newTokenId = await generateTokenId(addresses.ERC721_RARIBLE, addr)\n    \n    setTokenId(newTokenId)\n    setContractAddress(addresses.ERC721_RARIBLE)\n\n    const form = await createLazyMint(newTokenId, provider, addresses.ERC721_RARIBLE, addr, ipfsHash)\n    await putLazyMint(form)\n\n    console.log('STEP2: newTokenId', newTokenId)\n\n    goStep(3);\n  }\n\n  //Fractionize - create ERC-20 token - add liquidity on uniswap\n  const step3 = async () => {\n    const result = await managerFactory.callStatic.newManager(\n        addTokenState.tokenName,\n        addTokenState.tokenSymbol,\n        utils.parseEther(addTokenState.amtTotalMint),\n        utils.parseEther(addTokenState.minReqAmt),\n        utils.parseEther(addTokenState.minReqAmt),\n        {\n          value: utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\"),\n          gasLimit: BigNumber.from(\"5000000\"),\n        }\n    );\n    await managerFactory.newManager(\n        addTokenState.tokenName,\n        addTokenState.tokenSymbol,\n        utils.parseEther(addTokenState.amtTotalMint),\n        utils.parseEther(addTokenState.minReqAmt),\n        utils.parseEther(addTokenState.minReqAmt),\n        {\n            value: utils.parseEther(addTokenState.amtTotalMint).mul(utils.parseEther(addTokenState.price)).div(\"1000000000000000000\"),\n            gasLimit: BigNumber.from(\"5000000\"),\n        }\n    );\n    console.log('STEP3: result', result)\n\n    setNewManagerAddr(result[1]);\n\n    goStep(4);\n  }\n\n\n  const goStep = async (stepIdx) => {\n    setStep(stepIdx)\n    if (stepIdx===1) {\n      setProcessing(true)\n      setProgress(3)\n      await step1();\n    } else if (stepIdx===2) {\n      setProgress(33)\n      await step2();\n    } else if (stepIdx===3) {\n      setProgress(70)\n      await step3();\n    } else {\n      setProgress(100)\n      setProcessing(false)\n\n      setSuccessModal({\n        open: true,\n        msg: \"NFT minting prcoess successfully finished !!\",\n      });\n    }\n  }\n\n  return (\n    <div>\n      <Card\n        className=\"mx-auto form-card text-center\"\n        style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n      >\n        <Card.Header>\n          <u>NFT Minting process</u>\n        </Card.Header>\n\n        <Card.Body>\n          <div>\n            <ProgressBar animated now={progress} label={`${step}`} />  \n\n            <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n              <Col>\n                { step === 0 ?\n                  <Card className=\"display-coupon-card\" >\n                      <Card.Header style={{ marginBottom: \"5px\" }}>\n                        <Image src={nftJSON.image} width=\"150px\"></Image>\n                        <h5>{nftJSON.name}</h5>\n                      </Card.Header>\n            \n                      <Card.Body>\n                        <div style={{ marginBottom: \"10px\" }}>\n                          {nftJSON.description && nftJSON.description.slice(0, 70)}\n                        </div>\n                      </Card.Body>\n                  </Card> : <div></div>\n                }\n\n                { step === 1 ?\n                    <div>\n                        <h4>Step1</h4>\n                        <div>Uploading music info into IPFS</div>\n                    </div> : <div></div>\n                }\n\n                { step === 2 ?\n                    <div>\n                        <h4>Step2</h4>\n                        <div>Minting NFT with rarible protocol</div>\n                    </div> : <div></div>\n                }\n\n                { step === 3 ?\n                    <div>\n                        <h4>Step3</h4>\n                        <div>Fractionalized - create ERC-20 token - add liquidity on uniswap</div>\n                    </div> : <div></div>\n                }\n\n                { step === 4 ?\n                  <div>\n                    <h4>Complete</h4>\n                    <div>\n                        IPFS Hash: {ipfsHash} <br />\n                        TokenId: {tokenId} <br />\n                        NFT Contract address: {contractAddress} <br />\n                        <a href={`https://ropsten.rarible.com/token/${contractAddress}:${tokenId}?tab=history`} target=\"_blank\">Go Rarible</a> <br />\n                        Fractionalized Address: {newManagerAddr}\n                    </div>\n                  </div>\n                    : <div></div>\n                }\n              </Col>\n            </Row>\n          </div>\n        </Card.Body>\n\n        <Card.Footer className=\"text-center\">\n          <Button\n            onClick={() => goStep(1)}\n            variant=\"outline-success\"\n          >\n            {\n              processing ?\n              <div className=\"d-flex align-items-center\">\n                Processing\n                <span className=\"loading ml-2\"></span>\n              </div>\n              :\n              <div>Minting</div>\n            }\n          </Button>\n        </Card.Footer>\n      </Card>\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() => setErrorModal({\n          ...errorModal, open: false\n        })}\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() => setSuccessModal({\n          ...successModal, open: false\n        })}\n        onConfirm={() => {}}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div >\n  );\n}\n",{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"245","replacedBy":"249"},{"ruleId":"247","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":25,"column":36,"nodeType":"253","messageId":"254","endLine":25,"endColumn":44},{"ruleId":"255","severity":1,"message":"256","line":85,"column":21,"nodeType":"257","endLine":85,"endColumn":36},{"ruleId":"251","severity":1,"message":"258","line":8,"column":9,"nodeType":"253","messageId":"254","endLine":8,"endColumn":12},{"ruleId":"251","severity":1,"message":"259","line":47,"column":9,"nodeType":"253","messageId":"254","endLine":47,"endColumn":30},{"ruleId":"245","replacedBy":"260"},{"ruleId":"247","replacedBy":"261"},{"ruleId":"251","severity":1,"message":"262","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":16},{"ruleId":"251","severity":1,"message":"263","line":3,"column":26,"nodeType":"253","messageId":"254","endLine":3,"endColumn":34},{"ruleId":"251","severity":1,"message":"264","line":5,"column":3,"nodeType":"253","messageId":"254","endLine":5,"endColumn":9},{"ruleId":"251","severity":1,"message":"265","line":14,"column":9,"nodeType":"253","messageId":"254","endLine":14,"endColumn":30},{"ruleId":"251","severity":1,"message":"266","line":45,"column":10,"nodeType":"253","messageId":"254","endLine":45,"endColumn":22},{"ruleId":"267","severity":1,"message":"268","line":118,"column":8,"nodeType":"269","endLine":118,"endColumn":41,"suggestions":"270"},{"ruleId":"267","severity":1,"message":"271","line":183,"column":8,"nodeType":"269","endLine":183,"endColumn":53,"suggestions":"272"},{"ruleId":"267","severity":1,"message":"273","line":20,"column":9,"nodeType":"274","endLine":31,"endColumn":5},{"ruleId":"267","severity":1,"message":"275","line":20,"column":9,"nodeType":"274","endLine":31,"endColumn":5},{"ruleId":"276","severity":1,"message":"277","line":10,"column":30,"nodeType":"278","messageId":"279","endLine":10,"endColumn":32},{"ruleId":"251","severity":1,"message":"280","line":1,"column":10,"nodeType":"253","messageId":"254","endLine":1,"endColumn":15},{"ruleId":"251","severity":1,"message":"281","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":16},{"ruleId":"251","severity":1,"message":"282","line":13,"column":3,"nodeType":"253","messageId":"254","endLine":13,"endColumn":8},{"ruleId":"251","severity":1,"message":"283","line":16,"column":3,"nodeType":"253","messageId":"254","endLine":16,"endColumn":11},{"ruleId":"251","severity":1,"message":"284","line":17,"column":3,"nodeType":"253","messageId":"254","endLine":17,"endColumn":17},{"ruleId":"267","severity":1,"message":"285","line":64,"column":20,"nodeType":"253","endLine":64,"endColumn":31},{"ruleId":"251","severity":1,"message":"286","line":4,"column":34,"nodeType":"253","messageId":"254","endLine":4,"endColumn":38},{"ruleId":"276","severity":1,"message":"277","line":8,"column":32,"nodeType":"278","messageId":"279","endLine":8,"endColumn":34},{"ruleId":"251","severity":1,"message":"287","line":9,"column":10,"nodeType":"253","messageId":"254","endLine":9,"endColumn":18},{"ruleId":"251","severity":1,"message":"263","line":3,"column":26,"nodeType":"253","messageId":"254","endLine":3,"endColumn":34},{"ruleId":"251","severity":1,"message":"264","line":3,"column":43,"nodeType":"253","messageId":"254","endLine":3,"endColumn":49},{"ruleId":"251","severity":1,"message":"288","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":15},{"ruleId":"251","severity":1,"message":"289","line":32,"column":11,"nodeType":"253","messageId":"254","endLine":32,"endColumn":42},{"ruleId":"251","severity":1,"message":"290","line":41,"column":13,"nodeType":"253","messageId":"254","endLine":41,"endColumn":24},{"ruleId":"251","severity":1,"message":"291","line":4,"column":23,"nodeType":"253","messageId":"254","endLine":4,"endColumn":33},{"ruleId":"251","severity":1,"message":"281","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":16},{"ruleId":"251","severity":1,"message":"292","line":5,"column":18,"nodeType":"253","messageId":"254","endLine":5,"endColumn":27},{"ruleId":"251","severity":1,"message":"293","line":5,"column":36,"nodeType":"253","messageId":"254","endLine":5,"endColumn":44},{"ruleId":"251","severity":1,"message":"294","line":7,"column":10,"nodeType":"253","messageId":"254","endLine":7,"endColumn":14},{"ruleId":"276","severity":1,"message":"277","line":12,"column":33,"nodeType":"278","messageId":"279","endLine":12,"endColumn":35},{"ruleId":"251","severity":1,"message":"280","line":1,"column":10,"nodeType":"253","messageId":"254","endLine":1,"endColumn":15},{"ruleId":"251","severity":1,"message":"295","line":2,"column":16,"nodeType":"253","messageId":"254","endLine":2,"endColumn":30},{"ruleId":"251","severity":1,"message":"296","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":19},{"ruleId":"297","severity":1,"message":"298","line":13,"column":28,"nodeType":"299","messageId":"279","endLine":13,"endColumn":30},{"ruleId":"297","severity":1,"message":"298","line":17,"column":27,"nodeType":"299","messageId":"279","endLine":17,"endColumn":29},{"ruleId":"297","severity":1,"message":"298","line":38,"column":26,"nodeType":"299","messageId":"279","endLine":38,"endColumn":28},{"ruleId":"297","severity":1,"message":"298","line":42,"column":25,"nodeType":"299","messageId":"279","endLine":42,"endColumn":27},{"ruleId":"297","severity":1,"message":"298","line":46,"column":27,"nodeType":"299","messageId":"279","endLine":46,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":51,"column":74,"nodeType":"302","messageId":"303","endLine":51,"endColumn":75},{"ruleId":"251","severity":1,"message":"263","line":4,"column":34,"nodeType":"253","messageId":"254","endLine":4,"endColumn":42},{"ruleId":"251","severity":1,"message":"286","line":4,"column":44,"nodeType":"253","messageId":"254","endLine":4,"endColumn":48},{"ruleId":"251","severity":1,"message":"281","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":16},{"ruleId":"276","severity":1,"message":"277","line":11,"column":32,"nodeType":"278","messageId":"279","endLine":11,"endColumn":34},{"ruleId":"251","severity":1,"message":"304","line":37,"column":25,"nodeType":"253","messageId":"254","endLine":37,"endColumn":41},{"ruleId":"267","severity":1,"message":"285","line":71,"column":20,"nodeType":"253","endLine":71,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":250,"column":25,"nodeType":"305","messageId":"306","endLine":250,"endColumn":129,"fix":"307"},"no-native-reassign",["308"],"no-negated-in-lhs",["309"],["308"],["309"],"no-unused-vars","'buyToken' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'dai' is assigned a value but never used.","'checkIsAlreadyClaimed' is assigned a value but never used.",["308"],["309"],"'config' is defined but never used.","'CardDeck' is defined but never used.","'Button' is defined but never used.","'handleConnectMetamask' is assigned a value but never used.","'bondingPrice' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'getBondingPrice'. Either include it or remove the dependency array.","ArrayExpression",["310"],"React Hook useCallback has unnecessary dependencies: 'curPrice', 'profileAddr', 'provider', and 'tokenCount'. Either exclude them or remove the dependency array.",["311"],"The 'web3Modal' object construction makes the dependencies of useCallback Hook (at line 37) change on every render. To fix this, wrap the initialization of 'web3Modal' in its own useMemo() Hook.","VariableDeclarator","The 'web3Modal' object construction makes the dependencies of useCallback Hook (at line 44) change on every render. To fix this, wrap the initialization of 'web3Modal' in its own useMemo() Hook.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'utils' is defined but never used.","'ethers' is defined but never used.","'Image' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'Form' is defined but never used.","'provider' is assigned a value but never used.","'Loading' is defined but never used.","'updateYourCollectiblesByRarible' is assigned a value but never used.","'yourBalance' is assigned a value but never used.","'parseEther' is defined but never used.","'BigNumber' is defined but never used.","'Contract' is defined but never used.","'abis' is defined but never used.","'getMessageHash' is defined but never used.","'AssetType' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'setAddTokenState' is assigned a value but never used.","JSXOpeningElement","noTargetBlank",{"range":"312","text":"313"},"no-global-assign","no-unsafe-negation",{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},[8165,8165]," rel=\"noreferrer\"","Update the dependencies array to be: [buyToken, getBondingPrice, profileAddr, provider]",{"range":"318","text":"319"},"Update the dependencies array to be: []",{"range":"320","text":"321"},[4461,4494],"[buyToken, getBondingPrice, profileAddr, provider]",[7469,7514],"[]"]